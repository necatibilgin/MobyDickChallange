using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml;


namespace Part1
{
    class Program
    {
        static void Main()
        {
            Task t = new Task(DownloadPageAsync);
            t.Start();
            Console.WriteLine("Downloading page... Please Waiting...");
            Console.ReadLine();
        }

        static async void DownloadPageAsync()
        {
            // ... Target page.
            string page = "http://www.gutenberg.org/files/2701/2701-0.txt"; //page URL

            // ... Use HttpClient.
            using (HttpClient client = new HttpClient())
            using (HttpResponseMessage response = await client.GetAsync(page))
            using (HttpContent content = response.Content)
            {
                try
                {
                    // ... Read the string.
                    string result = await content.ReadAsStringAsync();

                    Dictionary<string, int> wordDictionary = new Dictionary<string, int>();

                    // ... Display the result.
                    if (result != null)
                    {
                        result = Regex.Replace(result, @"[^0-9A-Za-z ,]", " ").Replace(",", " ").Trim().ToLower(); //Clear all special characters and punctiations. All letters converted to lowercase
                        string[] readedPage = result.Split(' '); // 

                        for (int i = 0; i < readedPage.Length; i++)
                        {
                            string trimmedWord = readedPage[i];
                            if (wordDictionary.ContainsKey(trimmedWord)) // if hashtable contains key value increased 
                            {
                                wordDictionary[trimmedWord] = wordDictionary[trimmedWord] + 1;
                            }
                            else if (!wordDictionary.ContainsKey(trimmedWord) && trimmedWord.Length > 1) //if not contains and a word can not contains less than two letters.
                            {
                                wordDictionary.Add(trimmedWord, 1);
                            }
                        }

                        XmlDocument doc = new XmlDocument(); //create XML document
                        XmlElement words = doc.CreateElement("words");
                        doc.AppendChild(words);

                        foreach (var obWord in wordDictionary)
                        {
                            XmlElement word = doc.CreateElement("word");
                            word.SetAttribute("text", Convert.ToString(obWord.Key));
                            word.SetAttribute("count", Convert.ToString(obWord.Value));
                            words.AppendChild(word);
                        }
                        doc.Save("words.xml");
                        Console.WriteLine("\n\n\nDownload finished... words.xml file is ready...");
                        Console.ReadKey();

                    }
                    else
                    {
                        Console.WriteLine("Error... Text file is empty!");
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
                
            }
        }        
    }
}
